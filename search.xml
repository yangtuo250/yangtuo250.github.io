<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kendryte K510 编译环境搭建</title>
      <link href="/2022/04/16/kendryte-k510-bian-yi-huan-jing-da-jian/"/>
      <url>/2022/04/16/kendryte-k510-bian-yi-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<toc><h2 id="1-Start-K510-build-docker-environment"><a href="#1-Start-K510-build-docker-environment" class="headerlink" title="1. Start K510 build docker environment"></a>1. Start K510 build docker environment</h2><h3 id="i-Unzip-and-prepare-local-directory"><a href="#i-Unzip-and-prepare-local-directory" class="headerlink" title="i. Unzip and prepare local directory"></a>i. Unzip and prepare local directory</h3><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">cd k510_sdk_release_v1.4tar xf ./k510_buildroot-release.tar.gzxz -d -c ./k510_docker_env.tar.xz | sudo docker loadmdkir build-cache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ii-Start-build-container"><a href="#ii-Start-build-container" class="headerlink" title="ii. Start build container"></a>ii. Start build container</h3><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">docker run -itd \--name k510_env \--user "$(id -u):$(id -g)" \-v "/etc/passwd:/etc/passwd:ro" \-v "/etc/group:/etc/group:ro" \-v "$(pwd)/k510_buildroot-release:/opt/k510_buildroot" \-v "$(pwd)/build-cache:/opt/build-cache" \kendryte/k510_env:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="iii-Execute-container-bash"><a href="#iii-Execute-container-bash" class="headerlink" title="iii. Execute container bash"></a>iii. Execute container bash</h3><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">docker exec -it k510_env bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-CRB-v0-1-build-image"><a href="#2-CRB-v0-1-build-image" class="headerlink" title="2. CRB v0.1 build image"></a>2. CRB v0.1 build image</h2><h3 id="i-Build-first-time"><a href="#i-Build-first-time" class="headerlink" title="i. Build first time"></a>i. Build first time</h3><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">rm -r buildroot-2020.02.11 k510_crb_*make CONF=k510_crb_lp3_v0_1_defconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>It may takes long for building the first time. A backup for k510_buildroot-release and build-cache is strongly recommended!</p><h3 id="ii-Menuconfig"><a href="#ii-Menuconfig" class="headerlink" title="ii. Menuconfig"></a>ii. Menuconfig</h3><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">make CONF=k510_crb_lp3_v0_1_defconfig menuconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>After configured, save config to configs/k510_crb_lp3_v0_1_defconfig before make again:</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">make CONF=k510_crb_lp3_v0_1_defconfig savedefconfigmake CONF=k510_crb_lp3_v0_1_defconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-Burn-image-to-sd"><a href="#3-Burn-image-to-sd" class="headerlink" title="3. Burn image to sd"></a>3. Burn image to sd</h2><h3 id="i-Download-image-to-PC"><a href="#i-Download-image-to-PC" class="headerlink" title="i. Download image to PC"></a>i. Download image to PC</h3><p>Busybox image built at k510_buildroot-release/k510_crb_lp3_v0_1_defconfig/images/sysimage-sdcard.img<br>Debian image at k510_buildroot-release/k510_crb_lp3_v0_1_defconfig/images/sysimage-sdcard-debian.img</p><h3 id="ii-Burn-in"><a href="#ii-Burn-in" class="headerlink" title="ii. Burn in"></a>ii. Burn in</h3><p><a href="https://github.com/balena-io/etcher/releases">balenaEtcher</a> is official recommend tools for PC and Mac.</p></toc>]]></content>
      
      
      <categories>
          
          <category> TinyML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kendryte K510 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海思3559a开发版nnie图像分割部署流程</title>
      <link href="/2021/09/22/hai-si-3559a-kai-fa-ban-nnie-tu-xiang-fen-ge-bu-shu-liu-cheng/"/>
      <url>/2021/09/22/hai-si-3559a-kai-fa-ban-nnie-tu-xiang-fen-ge-bu-shu-liu-cheng/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#一-硬件">一. 硬件</a><ul><li><a href="#1-服务器">1. 服务器</a></li><li><a href="#2-开发板">2. 开发板</a></li></ul></li><li><a href="#二-图像分割网络enet">二. 图像分割网络ENet</a><ul><li><a href="#1-训练环境搭建">1. 训练环境搭建</a></li><li><a href="#2-enet的caffe安装">2. ENet的caffe安装</a></li><li><a href="#3-训练">3. 训练</a></li></ul></li><li><a href="#三-模型转换">三. 模型转换</a><ul><li><a href="#1-模型转换工具nnie_mapper_11使用环境配置">1. 模型转换工具nnie_mapper_11使用环境配置</a></li><li><a href="#2-模型转换">2. 模型转换</a></li></ul></li><li><a href="#四-部署代码编译">四. 部署代码编译</a><ul><li><a href="#1-海思交叉编译工具安装">1. 海思交叉编译工具安装</a></li><li><a href="#2-编译海思sdk">2. 编译海思SDK</a></li><li><a href="#3-交叉编译opencv-341">3. 交叉编译OpenCV-3.4.1</a></li><li><a href="#4-编译nnie-lite">4. 编译NNIE-lite</a></li></ul></li><li><a href="#五-部署">五. 部署</a><ul><li><a href="#1-在板子上编译opencv-341">1. 在板子上编译OpenCV-3.4.1</a></li><li><a href="#2-运行测试">2. 运行测试</a></li></ul></li></ul><span id="more"></span><h2 id="一-硬件"><a href="#一-硬件" class="headerlink" title="一. 硬件"></a>一. 硬件</h2><h3 id="1-服务器"><a href="#1-服务器" class="headerlink" title="1. 服务器"></a>1. 服务器</h3><p>硬件: X86_64, Nvidia Tesla T4</p><p>操作系统: Ubuntu 18.04.5</p><h3 id="2-开发板"><a href="#2-开发板" class="headerlink" title="2. 开发板"></a>2. 开发板</h3><p>硬件: 搭载海思Hi3559av100的IVP3559a开发板</p><p>操作系统: Ubuntu 18.04 arm(订制版，具体修改未知)</p><h2 id="二-图像分割网络ENet"><a href="#二-图像分割网络ENet" class="headerlink" title="二. 图像分割网络ENet"></a>二. 图像分割网络ENet</h2><h3 id="1-训练环境搭建"><a href="#1-训练环境搭建" class="headerlink" title="1. 训练环境搭建"></a>1. 训练环境搭建</h3><p>在GPU服务器上训练，首先安装Nvidia显卡驱动nvidia-driver-xxx。然后安装常见开发工具<code>git</code> <code>cmake</code>等。</p><p>为了使用python训练，及安装旧版本cuda(8.0)，建议使用conda虚拟环境避免破坏系统python和其他cuda lib版本。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">conda create -n caffepy2 <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">2.7</span> pipconda activate caffepy2conda <span class="token function">install</span> -c marta-sd <span class="token assign-left variable">cudatoolkit</span><span class="token operator">=</span><span class="token number">8.0</span> <span class="token assign-left variable">cudnn</span><span class="token operator">=</span><span class="token number">5.1</span>conda <span class="token function">install</span> <span class="token assign-left variable">h5py</span><span class="token operator">=</span><span class="token number">2.7</span> <span class="token assign-left variable">opencv</span><span class="token operator">=</span><span class="token number">3.4</span>.1 numpy scikit-image protobuf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-ENet的caffe安装"><a href="#2-ENet的caffe安装" class="headerlink" title="2. ENet的caffe安装"></a>2. ENet的caffe安装</h3><p>由于原版caffe不支持ENet某些层，所以，需要重新编译caffe ENet修改过的caffe。参考<a href="https://jin-zhe.github.io/guides/installing-caffe2-with-cuda-in-conda/">Installing Caffe2 with CUDA in Conda</a></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> clone --recursive https://github.com/yangtuo250/ENet.git -b develop<span class="token builtin class-name">cd</span> ENet/caffe-enet<span class="token function">mkdir</span> build <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> build<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/Tutorial/build_caffe.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-训练"><a href="#3-训练" class="headerlink" title="3. 训练"></a>3. 训练</h3><p>参考<a href="https://github.com/yangtuo250/ENet/blob/develop/Tutorial/README.md">Tutorial on how to train and test ENet on Cityscapes dataset</a></p><p>需要注意的点：</p><ol><li>prototxts的首层layer的batch_size根据自身硬件条件调整，避免太小影响BatchNorm或者太大导致OOM</li><li>如使用class weighting，参考Tutorial中<code>calculate_class_weighting.py</code>的使用方式，将结果复制到loss层-&gt;loss_param下，修改原<code>weight_by_label_freqs</code>为True</li><li>此版本为了配合nnie_mapper，将<a href="https://github.com/TimoSaemann/ENet">原版</a>中<em>Deconv层和Concat层后的</em>BN层修改为正常caffe的BatchNorm+Scale层（其他BN层会在执行<code>BN-absorber-enet.py</code>后被融合到Conv层，所以不需要修改），否则在nnie转换中会出现不支持参数</li></ol><h2 id="三-模型转换"><a href="#三-模型转换" class="headerlink" title="三. 模型转换"></a>三. 模型转换</h2><h3 id="1-模型转换工具nnie-mapper-11使用环境配置"><a href="#1-模型转换工具nnie-mapper-11使用环境配置" class="headerlink" title="1. 模型转换工具nnie_mapper_11使用环境配置"></a>1. 模型转换工具nnie_mapper_11使用环境配置</h3><p>通过<code>readelf -d ENet/final_model_weights/nnie_mapper_11</code>得知，需要<code>libprotobuf.so.3.6.1</code> <code>libopencv_core.so.3.4</code>。参考<a href="https://blog.csdn.net/racesu/article/details/107045858">NNIE模型转换环境搭建</a>可知，<strong>需要gcc(g++)-4.8</strong>编译protobuf-3.6.1和OpenCV-3.4，OpenCV版本经多次测试，最终使用3.4.4版本进行编译（兼容py2并不会导致nnie_mapper_11莫名其妙的依赖问题）。</p><p>依然使用conda配置环境</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> clone https://github.com/yangtuo250/NNIE-lite.git -b nnie11conda create -n nnie11 <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">2</span> pipconda activate nnie11<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gcc-4.8 g++-4.8<span class="token function">sudo</span> update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 <span class="token number">70</span><span class="token function">sudo</span> update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 <span class="token number">70</span><span class="token function">sudo</span> update-alternatives --config gcc<span class="token function">sudo</span> update-alternatives --config g++<span class="token function">git</span> clone https://github.com/opencv/opencv<span class="token builtin class-name">cd</span> opencv <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> checkout <span class="token number">3.4</span>.4 <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> build <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> build<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/NNIE-lite/build_opencv/build_opencv_nnie.sh<span class="token function">make</span> -j<span class="token function">make</span> <span class="token function">install</span><span class="token function">git</span> clone https://github.com/protocolbuffers/protobuf.git<span class="token builtin class-name">cd</span> protobuf <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> checkout <span class="token number">3.6</span>.1 <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> build <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> buildcmake <span class="token punctuation">..</span><span class="token function">make</span> -j<span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-模型转换"><a href="#2-模型转换" class="headerlink" title="2. 模型转换"></a>2. 模型转换</h3><p><br>修改<code>ENet/final_model_weights</code>下<code>image_ref_list.txt</code>中图像地址到自己数据集的测试集，并且修改<code>model_inst.cfg</code>中caffe模型的位置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">./nnie_mapper_11 model_inst.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四-部署代码编译"><a href="#四-部署代码编译" class="headerlink" title="四. 部署代码编译"></a>四. 部署代码编译</h2><p><strong><em>此方法较为繁琐，先在X86下交叉编译，然后部署到arm。理论上可以全部在开发板的arm环境下完成所有编译过程，未测试</em></strong></p><h3 id="1-海思交叉编译工具安装"><a href="#1-海思交叉编译工具安装" class="headerlink" title="1. 海思交叉编译工具安装"></a>1. 海思交叉编译工具安装</h3><p>参考《Hi3559AV100ES SDK 安装及升级使用说明.pdf》安装海思三个arm编译器。</p><h3 id="2-编译海思SDK"><a href="#2-编译海思SDK" class="headerlink" title="2. 编译海思SDK"></a>2. 编译海思SDK</h3><p>版本<code>Hi3559AV100_SDK_V2.0.3.1</code>。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> Hi3559AV100_SDK_V2.0.3.1/ <span class="token operator">&amp;&amp;</span> ./sdk.unpack<span class="token builtin class-name">cd</span> mpp/sample/svp/multi-core/nnie<span class="token function">make</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">..</span>/out/linux/multi-core/lib<span class="token function">rm</span> NNIE-lite/third_party/hisi/lib/*<span class="token function">cp</span> * NNIE-lite/third_party/hisi/lib <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-交叉编译OpenCV-3-4-1"><a href="#3-交叉编译OpenCV-3-4-1" class="headerlink" title="3. 交叉编译OpenCV-3.4.1"></a>3. 交叉编译OpenCV-3.4.1</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> clone https://github.com/opencv/opencv<span class="token builtin class-name">cd</span> opencv <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> checkout <span class="token number">3.4</span>.1 <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> build <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> build./NNIE-lite/build_opencv/build_opencv_himix100.sh<span class="token function">make</span> -j<span class="token function">rm</span> NNIE-lite/third_party/opencv-3.4.1/install_hisi/lib/*<span class="token function">cp</span> lib/* NNIE-lite/third_party/opencv-3.4.1/install_hisi/lib/ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-编译NNIE-lite"><a href="#4-编译NNIE-lite" class="headerlink" title="4. 编译NNIE-lite"></a>4. 编译NNIE-lite</h3><p>修改NNIE-lite中的<code>CMakeList.txt</code>，将<code>CMAKE_C_COMPILER</code> <code>CMAKE_CXX_COMPILER</code> <code>CMAKE_C_STRIP</code>修改为海思的编译器名称<code>aarch64-himix100-linux-*</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> NNIE-litemdkir build<span class="token builtin class-name">cd</span> buildcmake <span class="token punctuation">..</span><span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将编译好的NNIE-lite传输到海思开发板</p><h2 id="五-部署"><a href="#五-部署" class="headerlink" title="五. 部署"></a>五. 部署</h2><h3 id="1-在板子上编译OpenCV-3-4-1"><a href="#1-在板子上编译OpenCV-3-4-1" class="headerlink" title="1. 在板子上编译OpenCV-3.4.1"></a>1. 在板子上编译OpenCV-3.4.1</h3><p>编译过程同，cmake命令参考<a href="https://github.com/yangtuo250/NNIE-lite/blob/nnie11/build_opencv/build_opencv_hisiboard.sh">build_opencv_hisiboard.sh</a>，注意最后要make install</p><h3 id="2-运行测试"><a href="#2-运行测试" class="headerlink" title="2. 运行测试"></a>2. 运行测试</h3><p>在板子上，<em>需要root权限</em></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> NNIE-lite <span class="token operator">&amp;&amp;</span> ./run.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> TinyML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hisiv </tag>
            
            <tag> TinyML </tag>
            
            <tag> CV </tag>
            
            <tag> Segmentation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04 docker下caffe python2.7环境搭建</title>
      <link href="/2021/09/09/ubuntu18-04-docker-xia-caffe-python2-7-huan-jing-da-jian/"/>
      <url>/2021/09/09/ubuntu18-04-docker-xia-caffe-python2-7-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#一-docker安装及使用">一. docker安装及使用</a></li><li><a href="#二-docker容器内使用gpu">二. docker容器内使用GPU</a><ul><li><a href="#1-安装gpu驱动">1. 安装GPU驱动</a></li><li><a href="#2-安装nvidia-container-toolkit">2. 安装Nvidia container toolkit</a></li></ul></li><li><a href="#三-下载caffe官方docker镜像">三. 下载caffe官方docker镜像</a></li><li><a href="#四-建立docker容器">四. 建立docker容器</a></li></ul><span id="more"></span><h2 id="一-docker安装及使用"><a href="#一-docker安装及使用" class="headerlink" title="一. docker安装及使用"></a>一. docker安装及使用</h2><p>参考docker官方文档</p><p>安装：<a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></p><p>使用：<a href="https://docs.docker.com/get-started/">https://docs.docker.com/get-started/</a></p><h2 id="二-docker容器内使用GPU"><a href="#二-docker容器内使用GPU" class="headerlink" title="二. docker容器内使用GPU"></a>二. docker容器内使用GPU</h2><h3 id="1-安装GPU驱动"><a href="#1-安装GPU驱动" class="headerlink" title="1. 安装GPU驱动"></a>1. 安装GPU驱动</h3><p>参考<a href="https://tensorflow.google.cn/install/gpu#ubuntu_1804_cuda_110">Tensorflow官方教程GPU驱动安装</a></p><h3 id="2-安装Nvidia-container-toolkit"><a href="#2-安装Nvidia-container-toolkit" class="headerlink" title="2. 安装Nvidia container toolkit"></a>2. 安装Nvidia container toolkit</h3><p>Nvidia container toolkit是英伟达官方为docker容器内使用GPU的必备组件。安装方式参考其官方文档：</p><p><a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#install-guide">https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#install-guide</a></p><h2 id="三-下载caffe官方docker镜像"><a href="#三-下载caffe官方docker镜像" class="headerlink" title="三. 下载caffe官方docker镜像"></a>三. 下载caffe官方docker镜像</h2><p>在<a href="https://registry.hub.docker.com">dockerhub官网</a>搜索caffe，选择<a href="https://registry.hub.docker.com/r/bvlc/caffe">官方仓库</a>，按照提示进行下载。</p><h2 id="四-建立docker容器"><a href="#四-建立docker容器" class="headerlink" title="四. 建立docker容器"></a>四. 建立docker容器</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建容器docker run -itd --runtime=nvidia -v $YOUR_PROJECT_DIRECTORY:/workspace --name caffe bvlc/caffe:gpu# 进入容器docker exec -it caffe bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> devops </tag>
            
            <tag> deep-learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is AI?</title>
      <link href="/2020/03/17/what-is-ai/"/>
      <url>/2020/03/17/what-is-ai/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#一-概念澄清">一 概念澄清</a><ul><li><a href="#1-人工智能artificial-intelligence">1. 人工智能(Artificial Intelligence)</a></li><li><a href="#2-机器学习machine-learning">2. 机器学习(Machine Learning)</a></li><li><a href="#3-深度学习deep-learning">3. 深度学习(Deep Learning)</a></li><li><a href="#4-数据挖掘data-mining">4. 数据挖掘(Data Mining)</a></li><li><a href="#5-关系">5. 关系</a></li></ul></li><li><a href="#二-人工智能">二 人工智能</a><ul><li><a href="#1-评判标准----图灵测试">1 评判标准 — 图灵测试</a></li><li><a href="#2-等级划分">2. 等级划分</a></li></ul></li><li><a href="#三-机器学习">三 机器学习</a><ul><li><a href="#1-类别">1. 类别</a></li><li><a href="#2-实现过程">2. 实现过程</a></li><li><a href="#i-抽象">i. 抽象</a></li><li><a href="#ii-数据处理">ii. 数据处理</a></li><li><a href="#iii-构建模型">iii. 构建模型</a></li><li><a href="#iv-模型测试">iv. 模型测试</a></li><li><a href="#v-模型调优">v. 模型调优</a></li><li><a href="#vi-模型部署">vi. 模型部署</a></li></ul></li></ul><h2 id="一-概念澄清"><a href="#一-概念澄清" class="headerlink" title="一 概念澄清"></a>一 概念澄清</h2><h3 id="1-人工智能-Artificial-Intelligence"><a href="#1-人工智能-Artificial-Intelligence" class="headerlink" title="1. 人工智能(Artificial Intelligence)"></a>1. 人工智能(Artificial Intelligence)</h3><p>人工智能是计算机科学的一个分支，它企图了解智能的实质，并生产出一种新的能以人类智能相似的方式做出反应的智能机器，该领域的研究包括语音识别、图像识别、机器人、自然语言处理、智能搜索和专家系统等。人工智能可以对人的意识、思维的信息过程的模拟。人工智能不是人的智能，但能像人那样思考、也有可能超过人的智能。</p><h3 id="2-机器学习-Machine-Learning"><a href="#2-机器学习-Machine-Learning" class="headerlink" title="2. 机器学习(Machine Learning)"></a>2. 机器学习(Machine Learning)</h3><p>机器学习是指用某些算法指导计算机利用已知数据得出适当的模型，并利用此模型对新的情境给出判断的过程。</p><h3 id="3-深度学习-Deep-Learning"><a href="#3-深度学习-Deep-Learning" class="headerlink" title="3. 深度学习(Deep Learning)"></a>3. 深度学习(Deep Learning)</h3><p>深度学习是实现机器学习的一种方式。深度学习的概念源于人工神经网络(ANN)的研究。深度学习的动机在于建立、模拟人脑进行分析学习的神经网络，它模仿人脑的机制来解释数据，例如图像，声音和文本。其核心是模拟和学习人类大脑的神经元工作方式，比如其按特定的物理距离连接；而深度学习使用独立的层、连接，还有数据传播方向。</p><h3 id="4-数据挖掘-Data-Mining"><a href="#4-数据挖掘-Data-Mining" class="headerlink" title="4. 数据挖掘(Data Mining)"></a>4. 数据挖掘(Data Mining)</h3><p><img src="/2020/03/17/what-is-ai/datamining.png" alt="DataMining"></p><p>数据挖掘就是从海量数据中“挖掘”隐藏信息。数据是“大量的、不完全的、有噪声的、模糊的、随机的实际应用数据”，信息指的是“隐含的、规律性的、人们事先未知的、但又是潜在有用的并且最终可理解的信息和知识”。在商业环境中，企业希望让存放在数据库中的数据能“说话”，支持决策。所以，数据挖掘更偏向应用。</p><span id="more"></span><h3 id="5-关系"><a href="#5-关系" class="headerlink" title="5. 关系"></a>5. 关系</h3><p><img src="/2020/03/17/what-is-ai/summary.jpg" alt="relationship"></p><p>严格意义上说，人工智能和机器学习没有直接关系，只不过目前机器学习的方法被大量的应用于解决人工智能的问题而已。目前机器学习是人工智能的一种实现方式，也是最重要的实现方式。</p><p>早期的机器学习实际上是属于统计学，而非计算机科学的;而二十世纪九十年代之前的经典人工智能跟机器学习也没有关系。所以今天的AI和ML有很大的重叠，但并没有严格的从属关系。</p><p>不过如果仅就计算机系内部来说，ML是属于AI的。AI今天已经变成了一个很泛泛的学科了。</p><p>深度学习是机器学习现在比较火的一个方向，其本身是神经网络算法的衍生，在图像、语音等的分类和识别上取得了非常好的效果。</p><h2 id="二-人工智能"><a href="#二-人工智能" class="headerlink" title="二 人工智能"></a>二 人工智能</h2><h3 id="1-评判标准-—-图灵测试"><a href="#1-评判标准-—-图灵测试" class="headerlink" title="1 评判标准 — 图灵测试"></a>1 评判标准 — 图灵测试</h3><p>图灵测试是著名科学家阿兰·麦席森·图灵于1950年提出的。其内容是，如果计算机程序能在5分钟内回答由人类测试者提出的一系列问题，且其超过30%的回答让测试者误认为是人类所答，则该程序通过测试，表明该程序拥有接近于人类的智能。</p><p>图灵测试的参与者包含一名或多名评委，两名测试者。其中一名测试者是人类，另一名测试者是计算机程序。在评委不能直接看到测试者的情况下，由评委提出若干问题，然后根据回答做出自己的判断。</p><p>图灵测试本质上要回答的问题是“机器能思考吗？”，而判断的方式是人和人人工智能对于评委来说谁是人的概率更高。</p><p>完全图灵测试和反图灵测试。传统图灵测试一般避免受试者与评委产生物理沟通，而完全图灵测试则可以包含必要的人机在物理层面上的交互，比如感知能力与操纵物体的能力。反图灵测试—验证码。</p><h3 id="2-等级划分"><a href="#2-等级划分" class="headerlink" title="2. 等级划分"></a>2. 等级划分</h3><p>按照智能的高低，人工智能可以分为三个等级：</p><p>弱人工智能(Artificial Narrow Intelligence，简称ANI)。指的是在单一领域具有一定智能的程序。现在人们所研究出的人工智能基本都属于弱人工智能这一层次，比如AlphaGo的专属领域是围棋，谷歌翻译的专属领域是翻译自然语言。但你没有办法让AlphaGo去烹饪料理，或者让谷歌翻译去击败桥牌高手。</p><p>强人工智能(Artificial General Intelligence，简称AGI)。指的是拥有自我意识的程序，它们具有接近于人类的智能，可以像人类一样思考、学习、交流、解决问题。这种级别的人工智能，以现在的科技水平还远远实现不了。</p><p>超人工智能(Artificial Super Intelligence，简称ASI)。指的是在所有领域都凌驾于人类智慧的计算机程序，它们善于思考和创新，并且比人类更加聪明。如果在遥远的未来，真的实现了这样水平的人工智能，那么它们在人类面前，恐怕就是神明一样的存在。</p><h2 id="三-机器学习"><a href="#三-机器学习" class="headerlink" title="三 机器学习"></a>三 机器学习</h2><h3 id="1-类别"><a href="#1-类别" class="headerlink" title="1. 类别"></a>1. 类别</h3><p>机器学习主要以监督学习(supervised learning)、无监督学习(unsupervised learning)、半监督学习。</p><p>监督学习是对具有概念标记（分类）的训练样本进行学习，以尽可能对训练样本集外的数据进行标记（分类）预测。这里，所有的标记（分类）是已知的。监督学习是训练神经网络和决策树的最常见技术。这两种技术（神经网络和决策树）高度依赖于事先确定的分类系统给出的信息。</p><p>在非监督式学习中，数据并不被特别标识，学习模型是为了推断出数据的一些内在结构。常见的应用场景包括关联规则的学习以及聚类等。</p><p>半监督学习介于监督学习和半监督学习之间。输入数据部分被标识，部分没有被标识，这种学习模型可以用来进行预测，但是模型首先需要学习数据的内在结构以便合理的组织数据来进行预测。应用场景包括分类和回归，算法包括一些对常用监督式学习算法的延伸，这些算法首先试图对未标识数据进行建模，在此基础上再对标识的数据进行预测。</p><h3 id="2-实现过程"><a href="#2-实现过程" class="headerlink" title="2. 实现过程"></a>2. 实现过程</h3><h3 id="i-抽象"><a href="#i-抽象" class="headerlink" title="i. 抽象"></a>i. 抽象</h3><p>将具体要解决的问题抽象为一个机器学习问题。“统计进出货物板数” -&gt; “地牛进去/出来几次” -&gt; “图像识别”。</p><h3 id="ii-数据处理"><a href="#ii-数据处理" class="headerlink" title="ii. 数据处理"></a>ii. 数据处理</h3><p>预处理、标注、划分。</p><p>预处理是对于原始数据进行增删改查，使之能更好的应用于模型的构建。</p><p>查：对于数据进行分析，为增删改提供方向。</p><p>增：增加样本数量，人为去获取更多的样本，或者基于现有样本进行噪声增加。</p><p>删：删除样本，无效样本去除，样本平衡。</p><p>改：创建新的特征或删除冗余/无效特征。降维、升维。</p><p>标注是将数据与所需要的目标进行关联。对于监督学习，每个样本需要对应到具体的类别/值。“图片“ -&gt; “标注(画框)” -&gt; “带标注的图片”。</p><p>划分是对于数据进行训练、测试的分割，用于模型性能的验证。</p><h3 id="iii-构建模型"><a href="#iii-构建模型" class="headerlink" title="iii. 构建模型"></a>iii. 构建模型</h3><p>使用机器学习算法来建立模型。本质上是对于数学公式的拟合。</p><h3 id="iv-模型测试"><a href="#iv-模型测试" class="headerlink" title="iv. 模型测试"></a>iv. 模型测试</h3><p>对于模型的性能，通过数据结合评价指标进行打分。</p><h3 id="v-模型调优"><a href="#v-模型调优" class="headerlink" title="v. 模型调优"></a>v. 模型调优</h3><p>基于模型测试结果，对于模型进行改良，以达到需求标准。“人类95%” &lt;-&gt; “模型？”</p><h3 id="vi-模型部署"><a href="#vi-模型部署" class="headerlink" title="vi. 模型部署"></a>vi. 模型部署</h3><p>模型+逻辑，“抽象”的逆过程。</p>]]></content>
      
      
      <categories>
          
          <category> Knowledge-Sharing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Knowledge-Sharing </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>statistics1</title>
      <link href="/2019/11/10/statistics1/"/>
      <url>/2019/11/10/statistics1/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#problem-1-%e6%9d%be%e9%bc%a0%e7%86%8a%e4%b8%8e%e4%b8%8b%e9%9b%aa">Problem 1 松鼠、熊与下雪</a><ul><li><a href="#1-%e5%af%b9%e4%ba%8ee%e5%b1%b1%e6%9c%89%e5%a6%82%e4%b8%8b%e4%ba%8b%e5%ae%9e">1. 对于E山，有如下事实：</a></li><li><a href="#nbspnbspnbspnbspnbspnbspnbspnbspnbspnbspp%e5%8f%91%e7%8e%b0%e7%86%8a%e4%b8%8b%e9%9b%aap%e5%8f%91%e7%8e%b0%e6%9d%be%e9%bc%a0%e4%b8%8b%e9%9b%aa">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$P(发现熊|下雪)&lt;P(发现松鼠|下雪)$</a></li><li><a href="#nbspnbspnbspnbspnbspnbspnbspnbspnbspnbspp%e5%8f%91%e7%8e%b0%e7%86%8a%e4%b8%8d%e4%b8%8b%e9%9b%aap%e5%8f%91%e7%8e%b0%e6%9d%be%e9%bc%a0%e4%b8%8d%e4%b8%8b%e9%9b%aa">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$P(发现熊|不下雪)&lt;P(发现松鼠|不下雪)$</a></li><li><a href="#%e8%af%95%e9%97%ae%e8%83%bd%e5%90%a6%e6%96%ad%e8%a8%80e%e5%b1%b1%e7%9a%84p%e5%8f%91%e7%8e%b0%e7%86%8ap%e5%8f%91%e7%8e%b0%e6%9d%be%e9%bc%a0">试问能否断言E山的$P(发现熊)&lt;P(发现松鼠)$？</a></li><li><a href="#2-%e4%b8%8ed%e5%b1%b1%e7%9b%b8%e6%af%94c%e5%b1%b1%e7%9a%84p%e5%8f%91%e7%8e%b0%e6%9d%be%e9%bc%a0%e4%b8%8b%e9%9b%aa%e6%9b%b4%e9%ab%98%e5%90%8c%e6%97%b6p%e5%8f%91%e7%8e%b0%e6%9d%be%e9%bc%a0%e4%b8%8d%e4%b8%8b%e9%9b%aa%e4%b9%9f%e6%98%afc%e5%b1%b1%e6%9b%b4%e9%ab%98%e8%af%95%e9%97%ae%e8%83%bd%e5%90%a6%e6%96%ad%e8%a8%80c%e5%b1%b1%e7%9a%84p%e5%8f%91%e7%8e%b0%e6%9d%be%e9%bc%a0%e6%9b%b4%e9%ab%98">2. 与D山相比，C山的$P(发现松鼠|下雪)$更高。同时，$P(发现松鼠|不下雪)$也是C山更高。试问能否断言C山的$P(发现松鼠)$更高？</a><span id="more"></span></li></ul></li></ul><h2 id="Problem-1-松鼠、熊与下雪"><a href="#Problem-1-松鼠、熊与下雪" class="headerlink" title="Problem 1 松鼠、熊与下雪"></a>Problem 1 松鼠、熊与下雪</h2><h3 id="1-对于E山，有如下事实："><a href="#1-对于E山，有如下事实：" class="headerlink" title="1. 对于E山，有如下事实："></a>1. 对于E山，有如下事实：</h3><h3 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-P-发现熊-下雪-lt-P-发现松鼠-下雪"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-P-发现熊-下雪-lt-P-发现松鼠-下雪" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$P(发现熊|下雪)<P(发现松鼠|下雪)$"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$P(发现熊|下雪)&lt;P(发现松鼠|下雪)$</h3><h3 id="nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-P-发现熊-不下雪-lt-P-发现松鼠-不下雪"><a href="#nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-P-发现熊-不下雪-lt-P-发现松鼠-不下雪" class="headerlink" title="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$P(发现熊|不下雪)<P(发现松鼠|不下雪)$"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$P(发现熊|不下雪)&lt;P(发现松鼠|不下雪)$</h3><h3 id="试问能否断言E山的-P-发现熊-lt-P-发现松鼠-？"><a href="#试问能否断言E山的-P-发现熊-lt-P-发现松鼠-？" class="headerlink" title="试问能否断言E山的$P(发现熊)<P(发现松鼠)$？"></a>试问能否断言E山的$P(发现熊)&lt;P(发现松鼠)$？</h3><p>能!</p><script type="math/tex; mode=display">P(下雪)+P(不下雪)=1</script><script type="math/tex; mode=display">P(发现熊,下雪)+P(发现熊,不下雪)=P(发现熊)</script><script type="math/tex; mode=display">P(发现熊,下雪)=P(发现熊|下雪)P(下雪)</script><script type="math/tex; mode=display">P(发现熊)=P(发现熊|下雪)P(下雪)+P(发现熊|不下雪)P(不下雪)</script><p>松鼠同理</p><h3 id="2-与D山相比，C山的-P-发现松鼠-下雪-更高。同时，-P-发现松鼠-不下雪-也是C山更高。试问能否断言C山的-P-发现松鼠-更高？"><a href="#2-与D山相比，C山的-P-发现松鼠-下雪-更高。同时，-P-发现松鼠-不下雪-也是C山更高。试问能否断言C山的-P-发现松鼠-更高？" class="headerlink" title="2. 与D山相比，C山的$P(发现松鼠|下雪)$更高。同时，$P(发现松鼠|不下雪)$也是C山更高。试问能否断言C山的$P(发现松鼠)$更高？"></a>2. 与D山相比，C山的$P(发现松鼠|下雪)$更高。同时，$P(发现松鼠|不下雪)$也是C山更高。试问能否断言C山的$P(发现松鼠)$更高？</h3><blockquote><p>准备知识 辛普森悖论</p><blockquote><p>(wikipedia)辛普森悖论（亦称辛普森诡论）<br>当人们尝试探究两种变量（比如新生录取率与性别）是否具有相关性的时候，会分别对之进行分组研究。然而，在分组比较中都占优势的一方，在总评中有时反而是失势的一方。该现象于20世纪初就有人讨论，但一直到1951年，E.H.辛普森在他发表的论文中阐述此一现象后，该现象才算正式被描述解释。后来就以他的名字命名此悖论，即辛普森悖论。<br>为了避免辛普森悖论的出现，就需要斟酌<strong>各分组的权重</strong>，并乘以一定的系数去消除以分组数据基数差异而造成的影响。同时，我们必需清楚了解情况，以综合考虑是否存在造成此悖论的潜在因素。</p></blockquote></blockquote><p>证伪：<br>||$P(发现松鼠｜下雪)$|$P(发现松鼠｜不下雪)$|$P(下雪)$|$P(发现松鼠)$|<br>|:-:|:-:|:-:|:-:|:-:|<br>|C山|0.9|0.1|0.01|$0.9\times0.01+0.1\times0.99=0.108$|<br>|D山|0.5|0|0.99|$0.5\times0.99+0\times0.01=0.495$|</p><p>Talk is cheap, show me your formula. </p>]]></content>
      
      
      <categories>
          
          <category> Statistics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> statistics </tag>
            
            <tag> math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo yilia theme 更换 &amp; 新增功能</title>
      <link href="/2019/11/10/hexo-yilia-addons/"/>
      <url>/2019/11/10/hexo-yilia-addons/</url>
      
        <content type="html"><![CDATA[<h2 id="一-更换-yilia主题"><a href="#一-更换-yilia主题" class="headerlink" title="一 更换 yilia主题"></a>一 更换 yilia主题</h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1 下载"></a>1 下载</h3><p>在blog root下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/litten/hexo-theme-yilia.git themes/yilia<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><span id="more"></span><h3 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2 安装插件"></a>2 安装插件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-generator-json-content --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-配置"><a href="#3-配置" class="headerlink" title="3 配置"></a>3 配置</h3><p>在blog root下的<code>_config.yml</code>中新增</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">jsonContent:  meta: false  pages: false  posts:    title: true    date: true    path: true    text: false    raw: false    content: false    slug: false    updated: false    comments: false    link: false    permalink: false    excerpt: false    categories: false    tags: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-增加文章字数统计-amp-时间统计"><a href="#二-增加文章字数统计-amp-时间统计" class="headerlink" title="二 增加文章字数统计 &amp; 时间统计"></a>二 增加文章字数统计 &amp; 时间统计</h2><h3 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1 安装插件"></a>1 安装插件</h3><p>在blog root下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-修改配置"><a href="#2-修改配置" class="headerlink" title="2 修改配置"></a>2 修改配置</h3><p>在blog root下的<code>_config.yml</code>中新增</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">word_count: true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-字数-amp-时间统计"><a href="#3-字数-amp-时间统计" class="headerlink" title="3 字数 &amp; 时间统计"></a>3 字数 &amp; 时间统计</h3><p>在blog root下的<code>theme/yilia/layout/_partial/post</code>新增<code>word.ejs</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"margin-top:10px;"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"post-time"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"post-meta-item-icon"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-keyboard-o"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"post-meta-item-text"</span><span class="token operator">&gt;</span> 废话字数<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"post-count"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%=</span> <span class="token function">wordcount</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>content<span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span>字<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"post-time"</span><span class="token operator">&gt;</span>        <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">|</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>        <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"post-meta-item-icon"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-hourglass-half"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"post-meta-item-text"</span><span class="token operator">&gt;</span> 浪费时长<span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"post-count"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%=</span> <span class="token function">min2read</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>content<span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span>分<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>theme/yilia/layout/_partial/artical.ejs</code>中<code>/artical/div[@class="article-inner"]/header[@class="article-header"]</code>的<code>if (!post.noDate) {}</code>中增加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>word_count <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>post<span class="token punctuation">.</span>no_word_count<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">%</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'post/word'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="三-增加访问统计"><a href="#三-增加访问统计" class="headerlink" title="三 增加访问统计"></a>三 增加访问统计</h2><h3 id="1-网站访问统计"><a href="#1-网站访问统计" class="headerlink" title="1 网站访问统计"></a>1 网站访问统计</h3><p>在<code>theme/yilia/layout/_partial/footer.ejs</code>中增加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script <span class="token keyword">async</span> src<span class="token operator">=</span><span class="token string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并在<code>/footer/div/div/div[@class="footer-left"]</code>(在左边)或者新增<code>/footer/div/div/div[@class="footer-middle"]</code>（在中间）增加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"busuanzi_container_site_uv"</span><span class="token operator">&gt;</span>    有<span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"busuanzi_value_site_uv"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>人迷路了<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-文章访问统计"><a href="#2-文章访问统计" class="headerlink" title="2 文章访问统计"></a>2 文章访问统计</h3><p>在<code>theme/yilia/layout/_partial/artical.ejs</code>中<code>/artical/div[@class="article-inner"]/header[@class="article-header"]</code>中增加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>index <span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"archive-article-date"</span><span class="token operator">&gt;</span>    没品位的人 <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"busuanzi_value_page_pv"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> front-end </tag>
            
            <tag> hexo </tag>
            
            <tag> yilia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tensorboard</title>
      <link href="/2019/10/31/tensorboard/"/>
      <url>/2019/10/31/tensorboard/</url>
      
        <content type="html"><![CDATA[<p>mark for detail usage</p><p><a href="58.247.122.126:62178">示例</a></p>]]></content>
      
      
      <categories>
          
          <category> Tensorflow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Tensorflow </tag>
            
            <tag> Tensorboard </tag>
            
            <tag> visualization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python subprocess.Popen 两种使用方式</title>
      <link href="/2019/10/24/python-subprocess-popen/"/>
      <url>/2019/10/24/python-subprocess-popen/</url>
      
        <content type="html"><![CDATA[<h3 id="需求是捕捉到另外一个程序的运行情况，获取错误信息"><a href="#需求是捕捉到另外一个程序的运行情况，获取错误信息" class="headerlink" title="需求是捕捉到另外一个程序的运行情况，获取错误信息"></a>需求是捕捉到另外一个程序的运行情况，获取错误信息</h3><span id="more"></span><h2 id="1-直接调用Popen"><a href="#1-直接调用Popen" class="headerlink" title="1. 直接调用Popen"></a>1. 直接调用Popen</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""test.py"""</span><span class="token keyword">import</span> time<span class="token keyword">import</span> tensorflow<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sb subprocess"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> subprocessresult <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token string">"python -u test.py"</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    err <span class="token operator">=</span> result<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token comment"># if Traceback in one line of stderr, then print rest errors all</span>    <span class="token keyword">if</span> <span class="token string">"Traceback"</span> <span class="token keyword">in</span> err<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接调用Popen可以异步等待result生成</p><h2 id="2-使用Popen-communicate"><a href="#2-使用Popen-communicate" class="headerlink" title="2. 使用Popen.communicate()"></a>2. 使用Popen.communicate()</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> subprocessresult <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token string">"python -u test.py"</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span><span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">"Traceback"</span> <span class="token keyword">in</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用Popen的communicate()方法，会阻塞在result语句。</p><p>生成的result是一个二元tupple，（stdout, stderr）</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> subprocess </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
